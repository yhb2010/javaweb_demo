按照iso-8859-1编码：
			i	空格	a	m	空格	君		山
	char	49	20	61	6d	20	541b	5c71
	byte	49	20	61	6d	20	3f		3f
	中文“君山”被转化成值是3f的byte，3f也就是“？”字符，所以经常会出现中文变问号，可能就是错误的使用了iso-8859-1这个编码导致的。中文字符
	经过iso-8859-1编码会丢失信息，我们称之为“黑洞”。

gb2312
			i	空格	a	m	空格	君		山
	char	49	20	61	6d	20	541b	5c71
	byte	49	20	61	6d	20	be fd	c9 bd

gbk
			i	空格	a	m	空格	君		山
	char	49	20	61	6d	20	541b	5c71
	byte	49	20	61	6d	20	be fd	c9 bd
	gbk编码是兼容gb2312的，他们的编码算法也是一样的，不同的是，他们的码表长度不一样，gbk包含的汉字字符更多，所以只要是经过gb2312编码的
	汉字都可以用gbk解码，反之则不然。

utf-16
			i		空格		a		m		空格		君		山
	char	49		20		61		6d		20		541b	5c71
	byte	00 49	00 20	00 61	00 6d	00 20	54 1b	5c 71
	用utf-16编码将char数组方法了1倍，单字节范围内的字符在高位补0变成两字节，中文字符也变成两字节，从utf-16编码规则看，仅仅将字符的高位和
	低位进行拆分变成2字节，特点是编码效率非常高，规则简单。由于不同处理器对2字节的处理方式不同，有big-endian高位字节在前，低位字节在后或
	little-endian低位字节在前，高位字节在后编码。在对字符串进行编码时需要指明到底是big-endian还是little-endian，所以前面有两个字节
	用来保存byte_order_mark值。utf-16采用顺序编码，对不能字符的编码值进行校验，如果中间一个字符码值损坏，后面的所有码值都将受影响。

utf-8
			i	空格	a	m	空格	君			山
	char	49	20	61	6d	20	541b		5c71
	byte	49	20	61	6d	20	e5 90 9b	e5 b1 b1
	utf-8不存在utf-16的问题，utf-8对单字节范围内的字符仍然用1个字节表示，对汉字采用3个字节表示。

	utf-8编码与gbk和gb2312不同，不用查码表，所以utf-8的编码效率更高，所以在存储中文字符时采用utf-8编码比较理想。utf-8效率在gbk和
	utf-16之间。