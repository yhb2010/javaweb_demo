读取和写入文件io操作都需要调用操作系统提供的接口，因为磁盘设备是由操作系统管理的，应用程序要访问物理设备只能通过操作系统调用的方式来工作。
读和写分别对应read和write两个系统调用。而只要是系统调用就可能存在内核空间和用户空间地址切换的问题，这是操作系统为了保护系统本身的运行安全
而将内核程序运行使用的内存空间和用户程序运行的内存空间进行隔离造成的。但是这样虽然保证了内核程序运行的安全性，但是也必然存在数据可能需要从
内核空间向用户空间复制的问题。

如果遇到非常耗时的操作，如磁盘io，数据从磁盘复制到内核空间，再复制到用户空间，将会非常缓慢。这时操作系统为了加速io访问，在内核空间使用缓存
机制，也就是将从磁盘读取的文件按照一定的组织方式进行缓存，如果用户程序访问的是同一段磁盘地址的空间数据，那么操作系统将从内核缓存中直接取出
返回给用户程序。

1、标准访问文件的方式：
	当应用程序调用read接口时，操作系统检查在内核的高速缓存中有没有需要的数据，如果已经缓存了，那么就直接从缓存中返回，如果没有，则从磁盘
	读取，然后缓存在操作系统的缓存中。
	写入的方式是，用户的应用程序调用write接口将数据从用户地址空间复制到内核地址空间的缓存中。这时对用户程序来说写操作就已经完成，至于什么
	时候再写到磁盘中由操作系统决定，除非显示的调用sync同步命令。

2、直接io的方式：
	应用程序直接访问磁盘数据，而不经过操作系统内核数据缓冲区，这样做的目的就是减少一次从内核缓冲区到用户程序缓存的数据复制。这种方式通常是
	在对数据的缓存管理由应用程序实现的数据库管理系统中。
	但是直接io也有负面问题，如果访问的数据不在应用程序缓存中，那么每次数据都会直接从磁盘加载，会非常缓慢。通常直接io与异步io结合使用。

3、同步访问文件的方式：
	就是数据的读取和写入都是同步的，它与标准访问方式不同的是，只有当数据被成功写到磁盘时才会返回应用程序成功的标志。
	性能比较差，只有在一些对数据安全性要求比较高的场景中才会使用。

4、异步访问文件的方式：
	就是当访问数据的线程发出请求之后，线程会接着去处理其它事情，而不是阻塞等待，当请求的数据返回后继续处理下面的操作。可以明显的提高效率，
	但是不会改变访问文件的效率。