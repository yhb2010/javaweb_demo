1、读取原代码：
	一个字节为一节的读进来。
2、词法分析：
	对读入的字节找出哪些是我们定义的语法关键词，如java中的if、else、for、while等关键词；要识别哪些if是合法的关键词，哪些不是。
	词法分析的结果就是从源代码中找出一些规范化的token流，就像在人类语言中，给你一句话，你要能分辨出其中哪些是词语，哪些是标点符号，哪些是动词，哪些是名词
	等。
3、语法分析：
	对token流进行语法分析，检查这些关键词组合在一起是不是符合java语言规范，如在if的后面是不是紧跟着一个布尔判断表达式。就像在人类语言中是不是有主谓宾，主
	谓宾结合的是否正确，语法是否正确。
	语法分析的结果就是形成一个符合java语言规范的抽象语法树。抽象语法树是一个结构化的语法表达式，它的作用是把语言的主要词法用一个结构化的形式组织在一起，就
	像我们大学中所学的离散数学，用数字的形式来表达非数字但又有复杂关系的物质世界。对这棵语法树我们可以在后面按照新的规则再重新组织，这也是编译器的关键所在。
4、语义分析：
	虽然在上面一步中语法分析已经完成，也就是不存在语法问题了，但是语义是否正确呢？语义分析的主要工作是把一些难懂的、复杂的语法转换为更加简单的语法，将这个步
	骤对应到我们人类的语言中，就是将难懂的文言文转换成大家都能懂的白话文，或者注解一下一些成语，便于人们更好的理解。
	语义分析的结果就是将复杂的语法转变为最简单的语法，对应到java中，如将foreach转成for循环结构，还有注解等，最后形成一个注解过后的抽象语法树，这棵语法树
	更接近目标语言的语法规则。
	我们要在这棵语法树的基础上再做一些处理：比如给类添加默认的构造函数，检查变量在使用前是否已经初始化，将一些变量进行合并处理，检查操作变量类型是否匹配，检
	查所有的操作语句是否可达，检查checkd Exception异常是否已经捕获或抛出，解除java的语法糖等等。
5、通过字节码生成器生成字节码。