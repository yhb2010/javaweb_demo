java启动后也作为一个进程运行在操作系统中，那么这个进程有哪些部分需要分配内存空间呢？
	1、java堆：
	用于存储java对象的内存区域，堆的大小在jvm启动时就一次向操作系统申请完成，通过-Xmx和-Xms两个选项来控制大小，Xmx表示堆的最大大小，
	Xms表示初始大小，一旦分配完成，堆的大小就将固定，不能在内存不够时再向操作系统重新申请，同时当内存空闲时也不能将多余的空间交还给操作
	系统。
	在java堆中内存空间的管理由jvm来控制，对象创建由java应用程序来控制，但是对象所占的空间释放由管理堆内存的垃圾收集器来完成。根据垃圾
	收集器算法的不同内存回收的方式和时机也会不同。

	2、线程
	jvn运行实际程序的实体是线程，当然线程需要内存空间来存储一些必要的数据。每个线程创建时jvm都会为他创建一个堆栈，堆栈的大小根据不同的
	jvm实现而不同，通常在256kb至756kb之间。
	线程所占空间相比堆空间来说比较小，但是如果线程过多，线程堆栈的总内存使用量可能也非常大。当前有很多应用程序根据cpu的核数来分配创建的
	线程数，如果运行的应用程序的线程数量比可用于处理他们的处理器数量多，效率通常很低，并且可能导致比较差的性能和更高的内存占用率。

	3、类和类加载器
	在java中的类和加载类的类加载器本身同样需要存储空间，在sun jdk中他们被存储在堆中，这个区域叫做永久代（PermGen）。
	jvm是按需加载类的。
	理论上使用的java类越多，需要占用的内存也会越多，还有一种情况是可能会重复加载同一个类，一般jvm只会加载一个类到内存一次，但是如果是自
	己实现的类加载器会出现重复加载的情况，如果PermGen区不能对已经失效的类做卸载，可能会导致PermGen区内存泄露。通常一个类能够被卸载，需
	要满足一下条件：
	在java堆中没有对表示该类加载器的java.lang.ClassLoader对象的引用。
	java堆中没有对表示类加载器加载的类的任何java.lang.Class对象的引用。
	在java堆上该类加载器加载的任何类的所有对象都不再存活（被引用）。
	需要注意，jvm所创建的3个默认类加载器都不可能满足这些条件，因此，任何系统类（如String）或者通过应用程序类加载器加载的任何应用程序类
	都不能在运行是释放。