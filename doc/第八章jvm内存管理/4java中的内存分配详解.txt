java栈的分配是和线程绑定在一起的，当我们创建一个线程时，很显然，jvm就会为这个线程创建一个新的java栈，一个线程的方法的调用和返回对应于这个java栈的压栈和
出栈。当线程激活一个java方法时，jvm就会在线程的java堆栈里新压入一个帧，这个帧自然成了当前帧。在此方法执行期间，这个帧将用来保存参数、局部变量、中间计算
过程和其他数据。
栈中主要存放一些基本类型的变量数据(int\short\long\byte\float\double\boolean\char)和对象句柄(引用)。存取速度比堆要块。仅次于寄存器，栈数据可以共享
。缺点是，存在栈中的数据大小与生存期必须是确定的，这也导致缺乏了其灵活性。

每个java应用唯一对应一个jvm实例，每个实例唯一对应一个堆。应用程序在运行中所创建的所有类实例或数组都放在这个堆中，并由应用程序所有的线程共享。在java中分配
堆内存是自动初始化的，所有对象的存储空间都是在堆中分配的，但是这个对象的引用却是在堆栈中分配的。也就是说在建立一个对象时两个地方都分配内存，在堆中分配的内存
实际建立这个对象，而在堆栈中分配的内存只是一个指向这个堆对象的指针（引用）。