jvm的结构基本上由4部分组成：
	1、类加载器，在jvm启动时或者在类运行时将需要的class加载到jvm中。
	2、执行引擎：它的任务时负责执行class文件中包含的字节码指令，相当于实际机器上的cpu。
	3、内存区：将内存划分成若干个区以模拟实际机器上的存储、记录和调度功能模块，如实际机器上的各种功能的寄存器或者pc指针的记录器等。
	4、本地方法调用：调用c或c++实现的本地方法的代码返回结果。

类加载器：
	每个被jvm装载的类型都有一个对应的java.lang.Class类的实例来表示该类型，该实例可以唯一表示被jvm装载的class类，要求这个实例和其他类
	的实例一样都存放在java的堆中。

执行引擎：
	是jvm的核心部分，执行引擎的作用就是解析jvm字节码指令，得到执行结果。
	执行引擎也就是执行一条条代码的一个流程，而代码都是包含在方法体中的，所以执行引擎本质上就是执行一个个方法所串起来的流程，这样说来每个
	java线程就是一个执行引擎的实例，那么在一个jvm实例中就会同时有多个执行引擎在工作，这些执行引擎有的在执行用户的程序，有的在执行jvm内部
	的程序（如java垃圾收集器）。

java内存管理：
	执行引擎在执行一段程序时需要存储一些东西，如操作码需要的操作数，操作码的执行结果需要保存。class类的字节码还有类的对象等信息都需要在执
	行引擎执行之前就准备好。一个jvm实例会有一个方法区、java堆、java栈、pc寄存器和本地方法区。其中方法区和java堆是所有线程共享的，也就是
	可以被所有的执行引擎实例访问。每个新的执行引擎实例被创建时会为这个执行引擎创建一个java栈和一个pc寄存器，如果当前正在执行一个java方
	法，那么在当前的这个java栈中保存的就该线程中方法调用的状态，包括方法的参数、方法的局部变量、方法的返回值以及运算的中间结果等。